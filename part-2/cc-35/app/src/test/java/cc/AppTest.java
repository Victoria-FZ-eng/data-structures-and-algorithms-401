/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cc;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    @Test void testGraphImplementation(){
        Graph graph = new Graph();

        // An empty graph properly returns null
        assertEquals(null,App.allVerteces(graph));

        //Node can be successfully added to the graph
        assertTrue(App.addNode(graph,0));
        //A graph with only one node and edge can be properly returned
        assertEquals("0: \n" ,App.allVerteces(graph));

        //An edge can be successfully added to the graph
        assertEquals("0: 4 \n" + "4: 0 \n",App.addEdgeApp(graph,0,4,true));

        App.addEdgeApp(graph,0, 4, true);
        App.addEdgeApp(graph,1, 2, true);
        App.addEdgeApp(graph,1, 3, true);
        App.addEdgeApp(graph,1, 4, true);
        App.addEdgeApp(graph,2, 3, true);

        //A collection of all nodes can be properly retrieved from the graph
        assertEquals("0: 4 4 4 \n" + "1: 2 3 4 \n" +"2: 1 3 \n" +"3: 1 2 \n" +"4: 0 0 1 0 \n",
                App.addEdgeApp(graph,0,4,true));

        //All appropriate neighbors can be retrieved from the graph
        assertEquals("2: 1 3 \n",App.showNeighbours(graph,2));

        //Neighbors are returned with the weight between nodes included
        App.addWeightedEdge(graph,5,6,true,2);
        assertEquals("5: 6,2 \n",App.showNeighbours(graph,5));

        //The proper size is returned, representing the number of nodes in the graph
        assertEquals("The graph has 7 vertex",App.size(graph));
    }

}
