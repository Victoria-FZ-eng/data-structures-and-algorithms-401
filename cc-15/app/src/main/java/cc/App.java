/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cc;

import java.util.ArrayList;

public class App {
    public String getGreeting() {
        return "Hello From Code Challenge 15";
    }

    public static void main(String[] args) throws Exception {
        System.out.println(new App().getGreeting());

        BinaryTree tree = new BinaryTree();
        Node root =  new Node("A");
        root.left = new Node("B");
        root.right = new Node("C");
        root.left.left = new Node("D");
        root.left.right = new Node("E");
        root.right.left = new Node("F");
        root.right.right = new Node("G");
//
//        System.out.println(tree.preOrder(root));
//        System.out.println(tree.inOrder(root));
//        System.out.println(tree.postOrder(root));

        BinarySearchTree biTree = new BinarySearchTree();
        Node rootBi = new Node(50);
       biTree.addBinarySearchTree(70,rootBi);
       biTree.addBinarySearchTree(80,rootBi);
       biTree.addBinarySearchTree(17,rootBi);
       biTree.addBinarySearchTree(15,rootBi);
       biTree.addBinarySearchTree(23,rootBi);
       biTree.addBinarySearchTree(43,rootBi);
       biTree.addBinarySearchTree(65,rootBi);
       biTree.addBinarySearchTree(32,rootBi);
       biTree.addBinarySearchTree(74,rootBi);

//        System.out.println(biTree.preOrder(root));
//        System.out.println(biTree.inOrder(root));
//        System.out.println(biTree.postOrder(root));
        System.out.println(biTree.contains(5,rootBi));

        add(1);
        System.out.println("PreOrder=> "+pre(tree,root));
        System.out.print("PreOrderNew=> ");
        tree.preOrderNew(root);
        System.out.println("");
        System.out.println("InOrder=> "+in(tree,root));
        System.out.print("InOrderNew=> ");
        tree.inOrderNew(root);
        System.out.println("");
        System.out.println("PostOrder=> "+post(tree,root));
        System.out.print("PostOrderNew=> ");
        tree.postOrderNew(root);
        System.out.println("");
        System.out.print("BreadthFirst=> ");
        tree.breadthFirst(root);
        System.out.println("");


    }
    public static String empty(){
        BinaryTree tree= new BinaryTree<>();
        return "Empty Tree";
    }

    public static String  add(int value) throws Exception {
        BinarySearchTree biTree = new BinarySearchTree();
        Node root = new Node(value);
        return "Added";
    }

    public static ArrayList<Object> pre(BinaryTree tree,Node root) throws Exception {
        return tree.preOrder(root);
    }
    public static ArrayList<Object> in(BinaryTree tree,Node root) throws Exception {
        return tree.inOrder(root);
    }
    public static ArrayList<Object> post(BinaryTree tree,Node root) throws Exception {
        return tree.postOrder(root);
    }
}
